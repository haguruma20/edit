//3 monodisperse balls are given.
//Function "another" returns 4th ball which contacts them.
#include<iostream>
#include<vector>
#include<algorithm>
#include<math.h>

class point3
{
public:
  double x_coord;
  double y_coord;
  double z_coord;
  point3(double,double,double);
};

point3::point3(double x,double y,double z)
{
  x_coord=x;
  y_coord=y;
  z_coord=z;
};

bool operator < (const point3& lhs,const point3& rhs)
{
    return(lhs.z_coord<rhs.z_coord || (lhs.z_coord==rhs.z_coord && lhs.y_coord<rhs.y_coord) || (lhs.z_coord==rhs.z_coord && lhs.y_coord==rhs.y_coord && lhs.x_coord<rhs.x_coord));
};

//Euclidean distance between 2 points
double distance(point3& p1,point3& p2)
{
  return pow((p1.x_coord-p2.x_coord)*(p1.x_coord-p2.x_coord)+(p1.y_coord-p2.y_coord)*(p1.y_coord-p2.y_coord)+(p1.z_coord-p2.z_coord)*(p1.z_coord-p2.z_coord),0.5);
};

//main function
point3 another(point3& ball1, point3& ball2, point3& ball3, double radius, bool which)
{
  //normal vector against the plane generated by the 3 points
  //n=(n1,n2,n3)

  //vectors generating the plane
  //v1=(v11,v12,v13)
  //v2=(v21,v22,v23)

  //the circumcenter coordinate for the 3 points
  //circumcenter=(circumcenter1,circumcenter2,circumcenter3)

  double v11=ball1.x_coord-ball3.x_coord;
  double v12=ball1.y_coord-ball3.y_coord;
  double v13=ball1.z_coord-ball3.z_coord;
  double v21=ball2.x_coord-ball3.x_coord;
  double v22=ball2.y_coord-ball3.y_coord;
  double v23=ball2.z_coord-ball3.z_coord;
  
  double n1=v12*v23-v13*v22;
  double n2=v13*v21-v11*v23;
  double n3=v11*v22-v12*v21;
  //normalization
  double nnorm=pow(n1*n1+n2*n2+n3*n3,0.5);
  n1/=nnorm;
  n2/=nnorm;
  n3/=nnorm;

  //culcurate the circumcenter coordinate:(circumcenter1,circumcenter2,circumcenter3)
  //circumcenter-ball3=0.5v1+w=0.5v2+u
  //u=a*v1+b*v2
  //w=c*v1+d*v3
  //u \dot v2=0
  //w \dot v1=0
  //From above equations, we can get the coordinate.
  double v1norm2=v11*v11+v12*v12+v13*v13;
  double v2norm2=v21*v21+v22*v22+v23*v23;
  double v1dotv2=v11*v21+v12*v22+v13*v23;
  double a=v2norm2*(v1norm2-v1dotv2)/2.0/(v1norm2*v2norm2-v1dotv2*v1dotv2);
  double b=v1dotv2*(v1dotv2-v1norm2)/2.0/(v1norm2*v2norm2-v1dotv2*v1dotv2);
  //double c=v1dotv2*(v1dotv2-v2norm2)/2.0/(v1norm2*v2norm2-v1dotv2*v1dotv2);
  //double d=v1norm2*(v2norm2-v1dotv2)/2.0/(v1norm2*v2norm2-v1dotv2*v1dotv2);
  
  double circumcenter1=ball3.x_coord+a*v11+(0.5+b)*v21;
  double circumcenter2=ball3.y_coord+a*v12+(0.5+b)*v22;
  double circumcenter3=ball3.z_coord+a*v13+(0.5+b)*v23;
  point3 circumcenter(circumcenter1,circumcenter2,circumcenter3);
  double circumradius=distance(circumcenter,ball3);

  //height is the distance between the plane and 4th ball (or 5th ball)
  double height=pow(4*radius*radius-circumradius*circumradius,0.5);
  point3 forth_ball(circumcenter1+height*n1,circumcenter2+height*n2,circumcenter3+height*n3);
  point3 fifth_ball(circumcenter1-height*n1,circumcenter2-height*n2,circumcenter3-height*n3);
  std::vector<point3> balls={forth_ball,fifth_ball};
  std::sort(balls.begin(),balls.end());

  if(which)
    {
      return balls.at(0);
    }
  else
    {
      return balls.at(1);
    }
};

//main for debug
int main(int argc, char** argv)
{
  point3 b1(0,0,0);
  point3 b2(1,0,0);
  point3 b3(0.5,pow(3.0,0.5)/2.0,0);
  point3 b4=another(b1,b2,b3,0.5,true);
  std::cout<<b4.x_coord<<' '<<b4.y_coord<<' '<<b4.z_coord<<std::endl;
  b4=another(b1,b2,b3,0.5,false);
  std::cout<<b4.x_coord<<' '<<b4.y_coord<<' '<<b4.z_coord<<std::endl;
  return 0;
}
